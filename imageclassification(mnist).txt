import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout
from tensorflow.keras.datasets import mnist

# a. Loading and preprocessing the image data
(X_train, y_train), (X_test, y_test) = mnist.load_data()  # Load MNIST dataset

X_train = (X_train.reshape(X_train.shape[0], 28, 28, 1).astype('float32')) / 255.0
X_test = (X_test.reshape(X_test.shape[0], 28, 28, 1).astype('float32')) / 255.0

# b. Defining the model’s architecture
model = Sequential()
model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1))),  # Convolutional layer
model.add(MaxPooling2D(pool_size=(2, 2))),  # Max pooling layer
model.add(Flatten()),  # Flatten the input for the dense layer
model.add(Dense(128, activation='relu')),   # Hidden layer with ReLU activation
model.add(Dropout(0.3))                   # Dropout layer for regularization
model.add(Dense(10, activation='softmax'))  # Output layer with softmax activation for 10 classes

model.summary()

# c. Training the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])  # Compile the model

history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2)  # Train the model

# d. Estimating the model’s performance
test_loss, test_accuracy = model.evaluate(X_test, y_test)  # Evaluate on test set
#print(f'Test Loss: {test_loss:.4f}, Test Accuracy: {test_accuracy:.4f}')
print(f"Test Loss: {test_loss}")
print(f"Test Accuracy: {test_accuracy}")  # Print results

# Making predictions on test images
predictions = model.predict(X_test)  # Get predictions for test set
predicted_classes = np.argmax(predictions, axis=1)  # Get predicted class labels


image = X_train[3]
plt.imshow(np.squeeze(image), cmap= 'gray')
plt.show()

image = image.reshape(1, image.shape[0], image.shape[1], image.shape[2])
predict_model = model.predict([image])
print("Predicted class : {}".format(np.argmax(predict_model)))

# Plot training loss and accuracy
plt.figure(figsize=(12, 4))

# Plotting Training Loss
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

# Plotting Training Accuracy
plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

plt.tight_layout()
plt.show()